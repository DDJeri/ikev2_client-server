#!/usr/bin/env python  
# -*- coding:utf-8 -*-   

from Crypto.Cipher import AES
import hmac
import hashlib
from binascii import b2a_hex, a2b_hex  

class prpcrypt():  
	def __init__(self,key,iv):  
		self.key = key  
		self.iv  = iv  
		self.mode = AES.MODE_CBC  
		self.BS = AES.block_size  
			#补位  
	   
	def encrypt(self,text):  
		#text = self.pad(text)  
		cryptor = AES.new(self.key,self.mode,self.iv)  
			#目前AES-128 足够目前使用  
		ciphertext = cryptor.encrypt(text)  
			
		return ciphertext
	   
	#解密后，去掉补足的空格用strip() 去掉  
	def decrypt(self,text):  
		cryptor = AES.new(self.key,self.mode, self.iv)  
		plain_text  = cryptor.decrypt(text)  
		return plain_text

	def hash(self,key,text):
		my_sign = hmac.new(key, text, digestmod=hashlib.sha256).digest()  #字节流
		return my_sign

def encrypt(iv,ei,text):
    #iv = a2b_hex("a3189e27a06cb59c3df6d878a8202ba5")  	
    #pc = prpcrypt(a2b_hex("ACE6901466FED798F86C0BA778470EE8"), iv) #初始化密钥 和 iv 
    pc = prpcrypt(ei, iv) #初始化密钥 和 iv 
    
    #text = "25000010020000006d6f6f6e2e636f6d29000351043082034830820230a00302010202082e43fae7c4646fda300d06092a864886f70d01010b0500303a310b300906035504061302434e31133011060355040a130a4e6574776f726b4c6162311630140603550403130d4e6574776f726b4c6162204341301e170d3138303730393039303433305a170d3231303730383039303433305a3035310b300906035504061302434e31133011060355040a130a4e6574776f726b4c61623111300f060355040313086d6f6f6e2e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100d2e88744870a0375b5e892f4c1a94a573fcbb11b234d1b6ce456e87c84a686c7343ba514f3d18bbadb9ac75212d7a704bd9bd8019011dc6387aa63ac266185e7994162e897dcca053591dcf55f671ef1ad35df295a8d640c283b3a7c4f8f8f7d84c75a720a18ce82b2c68cfd9da4eec514f30b426978ec9c8eb7bb522f905079584205e5f52c86302c63402a028b408742e9f9cb47eb8995fd6f573e8ff4639bc06ea0ca16a73a4b57a5f8a48d62b23c1dc506e4551fb64595f857e9e4481c7f942cc67cdb94deb19eeda87cfeb7d55f9e964d849fde206fbbbe16f1592b55e70d4bafbae6339a858d8dc18d43d8673130aeb0702e0e3a39196af09b7ec352850203010001a3573055301f0603551d23041830168014fbf44714d7fef33248a0d39800ae7d596a70635a30130603551d11040c300a82086d6f6f6e2e636f6d301d0603551d250416301406082b0601050507030106082b06010505080202300d06092a864886f70d01010b0500038201010024d40e0533ee9d01205ac06b1ad7cd9946959c8e5c7958b687c472336f0105b6e48caec00cef2367c8eb5ce7c148c1d62657c806058aaaecc399fcb174f0dc8fc9554d4055107a2555b0ee48f0013fb476a7dae4b269bd99daff4f871ab473e5a2d24cd8e3c9eaa1285c29c43e6b07b7c5bec07eed6002a6b8fa4b2a4710ec104ecac14e3ab3fe26121a5f37525d181f175246d17df1af01cf5d5d540daf674d68a27e75f6140f181f24e5d7b1b7ad71db98326274d9ce1a0bb1d4b7da8d870b07ebf39e3e88a7fdc00dc1f4ffa7cd63a38f0b3cdccc2b6222877f536234ebe7ce6d674b6478f94c77ab856689114801f9c0f902e3f53ff70d90a80efb208269260000080000400024000019042d63cea437b86c9e501dcbe1e9fcde4a8d72fb312700000f0200000073756e2e636f6d210001180e0000000f300d06092a864886f70d01010b0500ba75579a8488acfc763dafe71e78b0963d96164e630ac9b8dbf61baf511685e78a754f17cb6fc214a9e803790eec3dc24c3c7a79281a8f48249f89a20c9525c73df837db0869ef04ff2a8b08703ed83d7e1b4d2e07028ebd8abf1ab4e98bf6fa16fb13b3ea62894a7ef4626cd28cb98de914b099482f4ce886195aa1285ff69626ced3816948aefac00554f26f1c7ea78f0495ddd8bc49570016a7a89a6e006afb8866f29b2be1a9c9a2e05226b6522da43996d18cf54a8b5ef5aee83eb5218bc28e8b39a39697a66ef1814f68935cc37d9050b5335edfc0e3325781634d44c832010087f2269c9f18448b35ef7e6125a95b6412fcbb97d4a54063f0da8891c72c0000b40200002801030403c1a479e20300000c0100000c800e0080030000080300000200000008050000000200002402030403c1a479e20300000801000003030000080300000200000008050000000000006403030409c1a479e20300000c0100000c800e00800300000c0100000c800e00c00300000c0100000c800e010003000008010000030300000c01000007800e010003000008030000020300000803000005030000080300000100000008050000002d00001801000000070000100000ffffc0a88800c0a888ff2900001801000000070000100000ffffc0a88900c0a889ff290000080000400c2900000c0000400dc0a88801290000180000400e20010da8100206000000000001c18b5e290000180000400e20010da810025033a50775de8599b1dc290000180000400e20010da81002503358ab685d313b07692900000800004014000000080000402115058e4ebb8906"    
    e = pc.encrypt(text[28:len(text)]) #加密 
    #sign = pc.hash(ai,text[:28] + iv + text[28:len(text)])
    
    #print "加密:",b2a_hex(e)  
    #print "指纹:",b2a_hex(sign)
    return e

def hash256(iv,ai,text):
	pc = prpcrypt(ai, iv)
	sign = pc.hash(ai,text[:-16])
	return sign

def decrypt_hash(iv,ei,text):
    pc = prpcrypt(ei, iv) #初始化密钥 和 iv
    plain_text = pc.decrypt(text)
    return plain_text
